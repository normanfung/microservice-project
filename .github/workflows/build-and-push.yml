name: Build and Push Microservices to ECR

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - stage
          - main

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}

jobs:

  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      services_changed: ${{ steps.set-services.outputs.services_changed }}
    steps:
      - uses: actions/checkout@v4
      - id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            adservice:
              - 'src/adservice/**'
            cartservice:
              - 'src/cartservice/src/**'
            checkoutservice:
              - 'src/checkoutservice/**'
            currencyservice:
              - 'src/currencyservice/**'
            emailservice:
              - 'src/emailservice/**'
            frontend:
              - 'src/frontend/**'
            loadgenerator:
              - 'src/loadgenerator/**'
            paymentservice:
              - 'src/paymentservice/**'
            productcatalogservice:
              - 'src/productcatalogservice/**'
            recommendationservice:
              - 'src/recommendationservice/**'
            shippingservice:
              - 'src/shippingservice/**'
            shoppingassistantservice:
              - 'src/shoppingassistantservice/**'

      - name: Set changed services output
        id: set-services
        shell: bash
        env:
          FILTER_ADSERVICE: ${{ steps.filter.outputs.adservice }}
          FILTER_CARTSERVICE: ${{ steps.filter.outputs.cartservice }}
          FILTER_CHECKOUTSERVICE: ${{ steps.filter.outputs.checkoutservice }}
          FILTER_CURRENCYSERVICE: ${{ steps.filter.outputs.currencyservice }}
          FILTER_EMAILSERVICE: ${{ steps.filter.outputs.emailservice }}
          FILTER_FRONTEND: ${{ steps.filter.outputs.frontend }}
          FILTER_LOADGENERATOR: ${{ steps.filter.outputs.loadgenerator }}
          FILTER_PAYMENTSERVICE: ${{ steps.filter.outputs.paymentservice }}
          FILTER_PRODUCTCATALOGSERVICE: ${{ steps.filter.outputs.productcatalogservice }}
          FILTER_RECOMMENDATIONSERVICE: ${{ steps.filter.outputs.recommendationservice }}
          FILTER_SHIPPINGSERVICE: ${{ steps.filter.outputs.shippingservice }}
          FILTER_SHOPPINGASSISTANTSERVICE: ${{ steps.filter.outputs.shoppingassistantservice }}
        run: |
          services=(
            "adservice"
            "cartservice"
            "checkoutservice"
            "currencyservice"
            "emailservice"
            "frontend"
            "loadgenerator"
            "paymentservice"
            "productcatalogservice"
            "recommendationservice"
            "shippingservice"
            "shoppingassistantservice"
          )

          changed=()
          for svc in "${services[@]}"; do
            key="FILTER_$(echo "$svc" | tr '[:lower:]' '[:upper:]')"
            changed_flag="${!key}"
            if [ "$changed_flag" = "true" ]; then
              changed+=("\"$svc\"")
            fi
          done

          changed_json="$(printf "[%s]" "$(IFS=,; echo "${changed[*]}")")"
          echo "Changed services: $changed_json"
          echo "services_changed=$changed_json" >> $GITHUB_OUTPUT
    
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: detect-changes
    strategy:
        matrix:
            service: ${{ fromJson(needs.detect-changes.outputs.services_changed) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, Tag, and Push Docker image
        run: |
          SERVICE=${{ matrix.service }}
          ENVIRONMENT=${{ github.event.inputs.environment }}
          IMAGE_TAG=$(echo "${{ github.sha }}" | cut -c1-7)
          ECR_REPO="${{ env.ECR_REGISTRY }}/${SERVICE}"

          DOCKER_CONTEXT="./src/$SERVICE"
          DOCKERFILE_PATH="$DOCKER_CONTEXT/Dockerfile"

          if [ "$SERVICE" = "cartservice" ]; then
            DOCKER_CONTEXT="./src/$SERVICE/src"
            DOCKERFILE_PATH="./src/$SERVICE/src/Dockerfile"
          fi

          docker build -t $ECR_REPO:$IMAGE_TAG -f $DOCKERFILE_PATH $DOCKER_CONTEXT
          echo "Pushing image with tag $IMAGE_TAG (SHA)..."
          docker push $ECR_REPO:$IMAGE_TAG

          docker tag $ECR_REPO:$IMAGE_TAG $ECR_REPO:$ENVIRONMENT
          echo "Pushing image with tag $ENVIRONMENT..."
          docker push $ECR_REPO:$ENVIRONMENT
      